AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: |
  Stackery Serverless API Example Stack 
Resources:
  function61D00F31:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function61D00F31
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: getWelcomePage
      CodeUri: src/getWelcomePage
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref tableD7A4016B
      Events:
        apiFE76C470:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref apiFE76C470
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt virtualNetwork53CF3C38.DefaultSecurityGroup
        SubnetIds:
          - !Ref virtualNetwork53CF3C38PrivateSubnet1
          - !Ref virtualNetwork53CF3C38PrivateSubnet2
      Environment:
        Variables:
          TABLE_NAME: !Ref tableD7A4016B
          TABLE_ARN: !GetAtt tableD7A4016B.Arn
    Metadata:
      StackeryName: getWelcomePage
  apiFE76C470:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName}
        - ResourceName: anotherAPI
      StageName: !Ref StackeryEnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function61D00F31.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function61D00F31.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function61D00F31.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${function61D00F31.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
    Metadata:
      StackeryName: anotherAPI
  function8E6C5467:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function8E6C5467
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: logErrors
      CodeUri: src/logErrors
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSLambdaENIManagementAccess
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt virtualNetwork53CF3C38.DefaultSecurityGroup
        SubnetIds:
          - !Ref virtualNetwork53CF3C38PrivateSubnet1
          - !Ref virtualNetwork53CF3C38PrivateSubnet2
      Environment:
        Variables:
          DB_INSTANCE: !Ref databaseCCF34AC2
          DB_ADDRESS: !GetAtt databaseCCF34AC2.Endpoint.Address
          DB_PORT: !GetAtt databaseCCF34AC2.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${databaseCCF34AC2}
    Metadata:
      StackeryName: logErrors
  virtualNetwork53CF3C38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Virtual Network ${ResourceName}
            - ResourceName: iAmVirtual
    Metadata:
      StackeryName: iAmVirtual
  virtualNetwork53CF3C38PrivateSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1
            - ResourceName: iAmVirtual
      VpcId: !Ref virtualNetwork53CF3C38
  virtualNetwork53CF3C38PrivateSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2
            - ResourceName: iAmVirtual
      VpcId: !Ref virtualNetwork53CF3C38
  virtualNetwork53CF3C38PublicSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 1
            - ResourceName: iAmVirtual
      VpcId: !Ref virtualNetwork53CF3C38
  virtualNetwork53CF3C38PublicSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 2
            - ResourceName: iAmVirtual
      VpcId: !Ref virtualNetwork53CF3C38
  virtualNetwork53CF3C38PrivateSubnet1NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  virtualNetwork53CF3C38PrivateSubnet1NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt virtualNetwork53CF3C38PrivateSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref virtualNetwork53CF3C38PrivateSubnet1
  virtualNetwork53CF3C38PrivateSubnet1RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1 Route Table
            - ResourceName: iAmVirtual
      VpcId: !Ref virtualNetwork53CF3C38
  virtualNetwork53CF3C38PrivateSubnet1NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref virtualNetwork53CF3C38PrivateSubnet1NatGateway
      RouteTableId: !Ref virtualNetwork53CF3C38PrivateSubnet1RouteTable
  virtualNetwork53CF3C38PrivateSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetwork53CF3C38PrivateSubnet1RouteTable
      SubnetId: !Ref virtualNetwork53CF3C38PrivateSubnet1
  virtualNetwork53CF3C38PrivateSubnet2NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  virtualNetwork53CF3C38PrivateSubnet2NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt virtualNetwork53CF3C38PrivateSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref virtualNetwork53CF3C38PrivateSubnet2
  virtualNetwork53CF3C38PrivateSubnet2RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2 Route Table
            - ResourceName: iAmVirtual
      VpcId: !Ref virtualNetwork53CF3C38
  virtualNetwork53CF3C38PrivateSubnet2NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref virtualNetwork53CF3C38PrivateSubnet2NatGateway
      RouteTableId: !Ref virtualNetwork53CF3C38PrivateSubnet2RouteTable
  virtualNetwork53CF3C38PrivateSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetwork53CF3C38PrivateSubnet2RouteTable
      SubnetId: !Ref virtualNetwork53CF3C38PrivateSubnet2
  virtualNetwork53CF3C38PublicSubnetsInternetGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Internet Gateway
            - ResourceName: iAmVirtual
  virtualNetwork53CF3C38PublicSubnetsInternetGatewayAttachment:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref virtualNetwork53CF3C38PublicSubnetsInternetGateway
      VpcId: !Ref virtualNetwork53CF3C38
  virtualNetwork53CF3C38PublicSubnetsRouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Route Table
            - ResourceName: iAmVirtual
      VpcId: !Ref virtualNetwork53CF3C38
  virtualNetwork53CF3C38PublicSubnetsInternetGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref virtualNetwork53CF3C38PublicSubnetsInternetGateway
      RouteTableId: !Ref virtualNetwork53CF3C38PublicSubnetsRouteTable
  virtualNetwork53CF3C38PublicSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetwork53CF3C38PublicSubnetsRouteTable
      SubnetId: !Ref virtualNetwork53CF3C38PublicSubnet1
  virtualNetwork53CF3C38PublicSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref virtualNetwork53CF3C38PublicSubnetsRouteTable
      SubnetId: !Ref virtualNetwork53CF3C38PublicSubnet2
  cdn720D9D6:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub cdn720d9d6.${StackeryDeploymentNamespace}.stackery-stacks.io
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: StackeryCDN
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref cdn720D9D6SSLCertificate
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !GetAtt objectStoreE3399FA4.DomainName
            Id: StackeryCDN
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${cdn720D9D6OriginAccessIdentity}
    Metadata:
      StackeryName: distributeTheThings
  cdn720D9D6SSLCertificate:
    Type: Custom::StackeryUsEast1SSLCertificate
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      DomainName: !Sub cdn720d9d6.${StackeryDeploymentNamespace}.stackery-stacks.io
      DomainValidationOptions:
        - DomainName: !Sub cdn720d9d6.${StackeryDeploymentNamespace}.stackery-stacks.io
          ValidationDomain: stackery-stacks.io
  cdn720D9D6StackeryStacksDomain:
    Type: Custom::StackeryStacksDomain
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      SubdomainName: !Sub cdn720d9d6.${StackeryDeploymentNamespace}
      CName: !GetAtt cdn720D9D6.DomainName
    Condition: cdn720D9D6StackeryStacksDomain
  objectStoreE3399FA4:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-objectstoree3399fa4
    Metadata:
      StackeryName: storeTheThings
  cdn720D9D6OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Stackery
  cdn720D9D6BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref objectStoreE3399FA4
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${cdn720D9D6OriginAccessIdentity}
            Action: s3:GetObject
            Resource: !Sub
              - ${BucketArn}/*
              - BucketArn: !GetAtt objectStoreE3399FA4.Arn
  tableD7A4016B:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-tableD7A4016B
    Metadata:
      StackeryName: aTable
  databaseCCF34AC2:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: '0'
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t2.micro
      DBSubnetGroupName: !Ref databaseCCF34AC2SubnetGroup
      Engine: postgres
      EngineVersion: '10.3'
      MasterUsername: root
      MasterUserPassword: dsfgvsdfdsf
      MultiAZ: false
      PubliclyAccessible: true
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName}
            - ResourceName: AllYourDBaseIsBelongToUs
      VPCSecurityGroups:
        - !Ref databaseCCF34AC2SecurityGroup
    Metadata:
      StackeryName: AllYourDBaseIsBelongToUs
  databaseCCF34AC2SubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: databaseCCF34AC2
      SubnetIds: !Ref DefaultVPCSubnets
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: databaseCCF34AC2
  databaseCCF34AC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 5432
        IpProtocol: tcp
        ToPort: 5432
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: AllYourDBaseIsBelongToUs
      VpcId: !Ref DefaultVPCId
  bastion51FDB4AD:
    Type: AWS::AutoScaling::AutoScalingGroup
    Metadata:
      StackeryType: bastion
      StackeryName: bastardBastion
    Properties:
      LaunchConfigurationName: !Ref bastion51FDB4ADLaunchConfiguration
      MaxSize: 2
      MinSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Bastion ${ResourceName} Instance
            - ResourceName: bastardBastion
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref virtualNetwork53CF3C38PublicSubnet1
        - !Ref virtualNetwork53CF3C38PublicSubnet2
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
  bastion51FDB4ADIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-bastion51FDB4AD
      Policies:
        - PolicyName: BastionPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - ec2:DescribeTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:log-group:/stackery/bastion/*
                  - arn:aws:logs:*:*:log-group:/stackery/bastion/*:log-stream:*
  bastion51FDB4ADIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref bastion51FDB4ADIAMRole
  bastion51FDB4ADInstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Instances Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub
            - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Bastion ${ResourceName} Instances Security Group
            - ResourceName: bastardBastion
      VpcId: !Ref virtualNetwork53CF3C38
  bastion51FDB4ADLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref bastion51FDB4ADIAMInstanceProfile
      ImageId: !Ref AmazonLinux2ImageId
      InstanceType: t2.nano
      SecurityGroups:
        - !Ref bastion51FDB4ADInstancesSecurityGroup
      UserData: !Base64
        Fn::Sub:
          - |-
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0

            --==BOUNDARY==
            MIME-Version: 1.0
            Content-Type: text/x-shellscript

            #!/bin/bash
            # Install awslogs, the jq JSON parser, and cfn-signal stuff
            yum install -y awslogs jq

            # Inject the CloudWatch Logs configuration file contents
            cat > /etc/awslogs/awslogs.conf <<- EOF
            [general]
            state_file = /var/lib/awslogs/agent-state

            [/var/log/dmesg]
            file = /var/log/dmesg
            log_group_name = /stackery/bastion/stackery-${AWS::StackName}-bastion51FDB4AD/dmesg
            log_stream_name = {instance_id}

            [/var/log/messages]
            file = /var/log/messages
            log_group_name = /stackery/bastion/stackery-${AWS::StackName}-bastion51FDB4AD/messages
            log_stream_name = {instance_id}
            datetime_format = %b %d %H:%M:%S

            [/var/log/secure]
            file = /var/log/secure
            log_group_name = /stackery/bastion/stackery-${AWS::StackName}-bastion51FDB4AD/secure
            log_stream_name = {instance_id}

            [/var/log/auth.log]
            file = /var/log/auth.log
            log_group_name = /stackery/bastion/stackery-${AWS::StackName}-bastion51FDB4AD/auth.log
            log_stream_name = {instance_id}

            EOF

            exec 2>>/var/log/cloudwatch-logs-start.log
            set -x

            # Grab the instance id ARN from instance metadata
            instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            # Replace the instance ID placeholders with the actual values
            sed -i -e "s/{instance_id}/$instance_id/g" /etc/awslogs/awslogs.conf

            service awslogs start
            chkconfig awslogs on

            ########################################################################
            # Create user logins and add their ssh key 
            ########################################################################
            echo '${SSHKeys}' > ~ec2-user/users.json
            filename="user.keys"
            jq -r 'to_entries[] | "\(.key) \(.value)"' ~ec2-user/users.json > "$filename"

            while read -r user key
            do
              echo "Adding user: $user"
              useradd -m $user
              homedir=$( getent passwd "$user" | cut -d: -f6 )
              cd $homedir
              mkdir .ssh
              chmod 700 .ssh
              chown $user:$user .ssh
              echo "$key" >> .ssh/authorized_keys
              chmod 600 .ssh/authorized_keys
              chown $user:$user .ssh/authorized_keys

            done < "$filename"

            rm "$filename"
            rm ~ec2-user/users.json

            --==BOUNDARY==
            MIME-Version: 1.0
            Content-Type: text/x-shellscript

            #!/bin/bash
            # Set the region to send CloudWatch Logs data to (the region where the instance is located)
            region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')
            sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf

            --==BOUNDARY==
          - SSHKeys: '{"<username1>":"<public key>","<username2>":"<public key>"}'
  dockerTask236A051C:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: hello-world
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref dockerTask236A051CLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: hello-world
          Name: 0
      Cpu: 1024
      ExecutionRoleArn: !GetAtt dockerTask236A051CExecutionRole.Arn
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt dockerTask236A051CTaskRole.Arn
      Volumes: []
    DependsOn: dockerTask236A051CLogGroup
  dockerTask236A051CLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/task/${AWS::StackName}-dockerTask236A051C/hello-world
  dockerTask236A051CExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: DownloadDockerImagesFromECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:*:log-group:/stackery/task/${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  dockerTask236A051CTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTaskTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
  queue9C8B3DAF:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-queue9C8B3DAF
      KmsMasterKeyId: alias/aws/sqs
    Metadata:
      StackeryName: iNameYouQueue
  stream44E5D3A7:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${AWS::StackName}-stream44E5D3A7
      ShardCount: 1
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
    Metadata:
      StackeryName: streamingService
  topicF3E10E63:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-topicF3E10E63
  table3C0EA155:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-table3C0EA155
  function96F17510:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-function96F17510
      Description: !Sub
        - Stackery Stack ${StackeryStackTagName} Environment ${StackeryEnvironmentTagName} Function ${ResourceName}
        - ResourceName: function96F17510
      CodeUri: src/function96F17510
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt topicF3E10E63.TopicName
      Environment:
        Variables:
          TOPIC_NAME: !GetAtt topicF3E10E63.TopicName
          TOPIC_ARN: !Ref topicF3E10E63
      Events:
        table3C0EA155:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt table3C0EA155.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
        Timer1:
          Type: Schedule
          Properties:
            Schedule: rate(365 days)
          Metadata:
            StackeryName: timeMe
Parameters:
  StackeryStackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  StackeryEnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  StackeryEnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  StackeryDeploymentNamespace:
    Type: String
    Description: Stackery Deployment Namespace (injected by Stackery at deployment time)
  DefaultVPCId:
    Type: AWS::EC2::VPC::Id
    Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)
  AmazonLinux2ImageId:
    Type: AWS::EC2::Image::Id
    Description: Latest Amazon Linux 2 AMI ID (injected by Stackery at deployment time)
Metadata:
  StackeryErrorsTargets:
    function8E6C5467: {}
Conditions:
  cdn720D9D6StackeryStacksDomain: !Or
    - !Equals
      - 'false'
      - 'false'
    - !Equals
      - 'false'
      - ''